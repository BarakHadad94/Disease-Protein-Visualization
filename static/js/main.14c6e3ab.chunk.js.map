{"version":3,"sources":["Graph.js","Autocomplete.jsx","App.js","serviceWorker.js","index.js"],"names":["Graph","props","state","jsonData","diseaseName","this","makeGraph","proteins","drugs","d3","remove","Row","Col","className","style","backgroundColor","height","width","overflow","border","ref","data","prots","hasOwnProperty","getNodeColor","node","type","console","log","nodes","links","i","protein","push","id","name","target","source","length","drug","drugName","window","innerWidth","innerHeight","svg","refs","canvas","attr","linkForce","link","simulation","force","strength","linkElements","append","selectAll","enter","nodeElementsProteins","nodesList","filter","n","on","d","nodeElementsDiseases","getDiseases","nodeElementsDrugs","getDrugs","textElements","text","x","y","Component","Autocomplete","onChange","e","hideChart","suggestions","userInput","currentTarget","value","filteredSuggestions","suggestion","toLowerCase","indexOf","setState","activeSuggestion","showSuggestions","onClick","innerText","handler","onKeyDown","keyCode","suggestionsListComponent","class","map","index","key","defaultProps","App","bind","userName","disease","jsonDrugs","view","open","val","url","fetch","method","mode","cache","credentials","headers","then","res","json","prevState","diseases","preventDefault","prot","getData","backgroundImage","backgroundRepeat","backgroundSize","Container","fluid","xs","src","display","justifyContent","fontFamily","textShadow","color","marginLeft","Button","variant","onEnter","aria-controls","aria-expanded","fontSize","marginTop","Fade","in","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6SAgNeA,E,kDA1MX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,SAAS,GACTC,YAAY,IAJD,E,iEAUfC,KAAKC,UAAUD,KAAKJ,MAAME,SAAUE,KAAKJ,MAAMG,YAAaC,KAAKJ,MAAMM,SAAUF,KAAKJ,MAAMO,S,+BAU5F,OAJAC,IAAa,WAAWC,SAKhB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,yBAAKC,UAAY,WACdC,MAAO,CAAEC,gBAAiB,QAAUC,OAAQ,SAAUC,MAAO,OAAQC,SAAU,OAC/EC,OAAQ,mBACPC,IAAI,e,gCAYlBC,EAAMjB,EAAakB,EAAMd,GAEvB,GAAGa,EAAKE,eAAenB,GAAc,CAAC,IA6D7BoB,EAAT,SAAsBC,GACtB,MAAqB,YAAdA,EAAKC,KAAqB,MACnB,YAAdD,EAAKC,KAAqB,OAAS,SA9D/BC,QAAQC,IAAI,8BACZ,IAAIC,EAAQ,GACRC,EAAQ,GACRC,EAAI,EAIR,IAAI,IAAIC,KAHRH,EAAMI,KAAK,CAACC,GAAG9B,EAAa+B,KAAK/B,EAAasB,KAAK,YAGhCJ,EAIf,GAHAO,EAAMI,KAAK,CAACC,GAAGZ,EAAMU,GAASG,KAAKb,EAAMU,GAAUN,KAAK,YACxDI,EAAMG,KAAK,CAACG,OAAOd,EAAMU,GAAUK,OAAOjC,IAEvCI,EAAMc,EAAMU,IAAUM,OAAS,GAE/B,IAAI,IAAIC,KAAQ/B,EAAMc,EAAMU,IAAU,CACrC,IAAIQ,EAAWhC,EAAMc,EAAMU,IAAUO,GACrCV,EAAMI,KAAK,CAACC,GAAG,GAAD,OAAIM,GAAJ,OAAeT,GAAKI,KAAKK,EAAUd,KAAK,SACtDI,EAAMG,KAAK,CAACG,OAAO,GAAD,OAAKI,GAAL,OAAgBT,GAAKM,OAAQf,EAAMU,KACrDD,IAIZ,IAAId,EAAQwB,OAAOC,WACf1B,EAASyB,OAAOE,YAAc,IAG9BC,EAAMnC,IAAUJ,KAAKwC,KAAKC,QAAQC,KAAK,UAAU,CAAC,EAAE,EAAE9B,EAAMD,IAgB5DgC,EAAYvC,MAEfyB,IAAG,SAAUe,GAAQ,OAAOA,EAAKf,MAG9BgB,EAAazC,MAEhB0C,MAAM,SAAU1C,MAAmB2C,UAAU,MAC7CD,MAAM,SAAU1C,IAAeQ,EAAQ,EAAGD,EAAS,IACnDmC,MAAM,OAAOH,GAEVK,EAAeT,EAAIU,OAAO,KACzBP,KAAK,QAAS,SACdQ,UAAU,QACVlC,KAAKS,GACL0B,QAAQF,OAAO,QACfP,KAAK,mBAAoB,GACrBA,KAAK,SAAU,yBAgBpBU,EAAuBb,EAAIU,OAAO,KACrCP,KAAK,QAAS,SACdQ,UAAU,UACVlC,MAZoBqC,EAYH7B,EAXP6B,EAAUC,QAAO,SAACC,GAAD,MAAkB,YAAXA,EAAElC,UAYpC8B,QAAQF,OAAO,UACXP,KAAK,IAAK,GACVA,KAAK,OAAQvB,GACbqC,GAAG,aAAa,SAAUC,GACvBrD,IAAUJ,MAAMS,MAAM,OAAQ,aAC/B+C,GAAG,YAAY,SAAUC,GACxBrD,IAAUJ,MAAMS,MAAM,OAAQ,WAIlCiD,EAAuBnB,EAAIU,OAAO,KACjCP,KAAK,QAAS,SACdQ,UAAU,QACVlC,KAvBL,SAAqBqC,GACb,OAAOA,EAAUC,QAAO,SAACC,GAAD,MAAkB,YAAXA,EAAElC,QAsB/BsC,CAAYnC,IACjB2B,QAAQF,OAAO,QACfP,KAAK,QAAS,IACdA,KAAK,SAAU,IACfA,KAAK,OAAQvB,GACbqC,GAAG,aAAa,SAAUC,GACvBrD,IAAUJ,MAAMS,MAAM,OAAQ,aAC/B+C,GAAG,YAAY,SAAUC,GACxBrD,IAAUJ,MAAMS,MAAM,OAAQ,UAGlCmD,EAAoBrB,EAAIU,OAAO,KAC9BP,KAAK,QAAS,SACdQ,UAAU,UACVlC,KAlCL,SAAkBqC,GACd,OAAOA,EAAUC,QAAO,SAACC,GAAD,MAAkB,SAAXA,EAAElC,QAiC3BwC,CAASrC,IACd2B,QAAQF,OAAO,UACXP,KAAK,IAAK,GACVA,KAAK,OAAQvB,GACjBqC,GAAG,aAAa,SAAUC,GACvBrD,IAAUJ,MAAMS,MAAM,OAAQ,aAC/B+C,GAAG,YAAY,SAAUC,GACxBrD,IAAUJ,MAAMS,MAAM,OAAQ,cAIlCqD,EAAevB,EAAIU,OAAO,KAC7BP,KAAK,QAAS,SACdQ,UAAU,QACVlC,KAAKQ,GACL2B,QAAQF,OAAO,QACXc,MAAK,SAAU3C,GAAQ,OAAQA,EAAKU,QACpCY,KAAK,YAAa,IAClBA,KAAK,KAAM,IACXA,KAAK,KAAM,GACXA,KAAK,OAAQvB,GACbuB,KAAK,cAAc,QAGxBG,EAAWrB,MAAMA,GAAOgC,GAAG,QAAQ,WAC/BJ,EACCV,KAAK,MAAM,SAAUtB,GAAQ,OAAOA,EAAK4C,KACzCtB,KAAK,MAAM,SAAUtB,GAAQ,OAAOA,EAAK6C,KAC9CP,EACKhB,KAAK,KAAK,SAAUtB,GAAQ,OAAOA,EAAK4C,KACxCtB,KAAK,KAAK,SAAUtB,GAAQ,OAAOA,EAAK6C,KAEzCL,EACClB,KAAK,MAAM,SAAUtB,GAAQ,OAAOA,EAAK4C,KACzCtB,KAAK,MAAM,SAAUtB,GAAQ,OAAOA,EAAK6C,KAG1CH,EACCpB,KAAK,KAAK,SAAUtB,GAAQ,OAAOA,EAAK4C,KACxCtB,KAAK,KAAK,SAAUtB,GAAQ,OAAOA,EAAK6C,KACzCjB,EACKN,KAAK,MAAM,SAAUE,GAAQ,OAAOA,EAAKZ,OAAOgC,KAChDtB,KAAK,MAAM,SAAUE,GAAQ,OAAOA,EAAKZ,OAAOiC,KAChDvB,KAAK,MAAM,SAAUE,GAAQ,OAAOA,EAAKb,OAAOiC,KAChDtB,KAAK,MAAM,SAAUE,GAAQ,OAAOA,EAAKb,OAAOkC,QAGzDpB,EAAWC,MAAM,QAAQrB,MAAMA,QAG3BH,QAAQC,IAAR,mBAAwBxB,EAAxB,eA1FJ,IAAqBsD,M,GA3GjBa,aCFdC,E,kDASJ,WAAYvE,GAAQ,IAAD,8BACjB,cAAMA,IAcRwE,SAAW,SAACC,GACV,EAAKzE,MAAM0E,YADK,IAERC,EAAgB,EAAK3E,MAArB2E,YACFC,EAAYH,EAAEI,cAAcC,MAG5BC,EAAsBJ,EAAYjB,QACtC,SAACsB,GAAD,OACgE,IAA9DA,EAAWC,cAAcC,QAAQN,EAAUK,kBAG/C,EAAKE,SAAS,CACZC,iBAAkB,EAClBL,sBACAM,iBAAiB,EACjBT,UAAWH,EAAEI,cAAcC,SA9BZ,EAkCnBQ,QAAU,SAACb,GACT,EAAKU,SAAS,CACZC,iBAAkB,EAClBL,oBAAqB,GACrBM,iBAAiB,EACjBT,UAAWH,EAAEI,cAAcU,YAG7B,EAAKvF,MAAMwF,QAAQf,EAAGA,EAAEI,cAAcU,YA1CrB,EA6CnBE,UAAY,SAAChB,GAAO,IAAD,EACiC,EAAKxE,MAA/CmF,EADS,EACTA,iBAAkBL,EADT,EACSA,oBAG1B,GAAkB,KAAdN,EAAEiB,QACJ,EAAKP,SAAS,CACZC,iBAAkB,EAClBC,iBAAiB,EACjBT,UAAWG,EAAoBK,UAI9B,GAAkB,KAAdX,EAAEiB,QAAgB,CACzB,GAAyB,IAArBN,EACF,OAGF,EAAKD,SAAS,CAAEC,iBAAkBA,EAAmB,SAGlD,GAAkB,KAAdX,EAAEiB,QAAgB,CACzB,GAAIN,EAAmB,IAAML,EAAoB1C,OAC/C,OAGF,EAAK8C,SAAS,CAAEC,iBAAkBA,EAAmB,MAnEvD,EAAKnF,MAAQ,CAEXmF,iBAAkB,EAElBL,oBAAqB,GAErBM,iBAAiB,EAEjBT,UAAW,IAXI,E,qDA0ET,IAaJe,EAXFnB,EASEpE,KATFoE,SACAc,EAQElF,KARFkF,QACAG,EAOErF,KAPFqF,UAJK,EAWHrF,KANFH,MACEmF,EANG,EAMHA,iBACAL,EAPG,EAOHA,oBACAM,EARG,EAQHA,gBACAT,EATG,EASHA,UAmCJ,OA7BIS,GAAmBT,IAEnBe,EADEZ,EAAoB1C,OAEpB,wBAAIuD,MAAM,eACPb,EAAoBc,KAAI,SAACb,EAAYc,GACpC,IAAIlF,EAOJ,OAJIkF,IAAUV,IACZxE,EAAY,qBAIZ,wBAAIA,UAAWA,EAAWmF,IAAKf,EAAYM,QAASA,GACjDN,OAQT,yBAAKY,MAAM,kBACT,qEAON,kBAAC,WAAD,KACE,2BACEnE,KAAK,OACL+C,SAAUA,EACViB,UAAWA,EACXX,MAAOF,IAERe,O,GAvIkBrB,aAArBC,EAKGyB,aAAe,CACpBrB,YAAa,IAuIFJ,Q,4CCiJA0B,E,kDA5Qb,WAAYjG,GAAQ,IAAD,8BACjB,cAAMA,IACDwF,QAAU,EAAKA,QAAQU,KAAb,gBACf,EAAKxB,UAAY,EAAKA,UAAUwB,KAAf,gBACjB,EAAKjG,MAAQ,CACXkG,SAAU,QACVrB,MAAO,GACPsB,QAAS,GACTlG,SAAU,GACVmG,UAAW,GACX9F,MAAO,GACP+F,MAAM,EACNC,MAAM,GAZS,E,wDAiBjBnG,KAAK+E,SAAS,CACZmB,MAAM,EACNC,MAAM,M,8BAGF9B,EAAG+B,GACTpG,KAAK+E,SAAS,CACZiB,QAASI,EACT1B,MAAO0B,M,0CAGU,IAAD,OAClB9E,QAAQC,IAAI,gBACZ,IAAI8E,EAAM,oDACOC,MAAMD,EAAK,CAC1BE,OAAQ,MACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACP,aACE,kEAGHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAC5F,GACL,EAAK+D,UAAS,SAACgC,GAAD,MAAgB,CAAEjH,SAAUkB,MAC1C,EAAK2C,iBAGT0C,EAAM,oDACYC,MAAMD,EAAK,CAC3BE,OAAQ,MACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACP,aACE,kEAGHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAC5F,GACL,EAAK+D,UAAS,SAACgC,GAAD,MAAgB,CAAEd,UAAWjF,W,oCAK/C,IAAIgG,EAAW,GACf,IAAK,IAAIvD,KAAKzD,KAAKH,MAAMC,SACvBkH,EAASpF,KAAK6B,GAGhBzD,KAAK+E,UAAS,SAACgC,GAAD,MAAgB,CAC5BC,SAAUA,Q,8BAIN3C,GACNA,EAAE4C,iBAEFjH,KAAK+E,SAAS,CACZL,MAAOL,EAAEtC,OAAO2C,MAChBwB,MAAM,EACNC,MAAM,IAER7E,QAAQC,IAAI,S,gCAGH,IAAD,OACJrB,EAAWF,KAAKH,MAAMC,SAASE,KAAKH,MAAM6E,OAC1CvE,EAAQ,GACZ,IAAK,IAAI+G,KAAQhH,EACfC,EAAMD,EAASgH,IAASlH,KAAKH,MAAMoG,UAAU/F,EAASgH,IAExDlH,KAAK+E,UAAS,SAACgC,GAAD,MAAgB,CAC5B7G,SAAU,EAAKL,MAAMC,SAAS,EAAKD,MAAM6E,OACzCsB,QAAS,EAAKnG,MAAM6E,MACpBvE,MAAOA,Q,8BAIHkE,GACN/C,QAAQC,IAAI,SACZvB,KAAKmH,UACL9C,EAAE4C,iBACFjH,KAAK+E,UAAS,SAACgC,GAAD,MAAgB,CAC5Bb,MAAM,EACNC,MAAM,Q,+BAKA,IAAD,OACWnG,KAAKH,MAAM6E,MAC7B,OACE,0BACEjE,MAAO,CACL2G,gBACE,wEACFC,iBAAkB,YAClBC,eAAgB,UAGlB,kBAACC,EAAA,EAAD,CAAWC,OAAK,GAGd,kBAAClH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACD,EAAA,EAAD,KAGE,kBAACC,EAAA,EAAD,CAAKkH,GAAI,KACP,yBACEC,IAAI,gJACJjH,MAAO,CAAEE,OAAQ,QAASC,MAAO,YAMrC,kBAACL,EAAA,EAAD,CAAKkH,GAAI,GACP,kBAACnH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACA,wBACEE,MAAO,CACLkH,QAAS,OACTC,eAAgB,SAChBC,WAAY,cACZC,WAAY,gCACZC,MAAO,UANX,2BAS2B,KAEzB,+BAGJ,kBAACzH,EAAA,EAAD,KAYI,kBAACC,EAAA,EAAD,CAAKkH,GAAI,EAAGhH,MAAO,CAACuH,WAAW,UAC/B,kBAAC,EAAD,CACEzD,YAAavE,KAAKH,MAAMmH,SACxB5B,QAASpF,KAAKoF,QACdd,UAAWtE,KAAKsE,aAGpB,kBAAC/D,EAAA,EAAD,CAAKkH,GAAI,EAAGhH,MAAO,CAACuH,WAAW,SAC7B,kBAACC,EAAA,EAAD,CACIC,QAAQ,UACR1H,UAAU,SACV0E,QAAS,SAACb,GACR,EAAK8C,UACL,EAAKgB,QAAQ9D,IAGf+D,gBAAc,oBACdC,gBAAerI,KAAKH,MAAMsG,MAE3B,IAXH,UAYS,+BAGT,yBACE1F,MAAO,CACLE,OAAQ,OACRoH,MAAO,QACPO,SAAU,OACVN,WAAY,QACZO,UAAU,SAGXvI,KAAKH,MAAMqG,KACV,2BACE,0BAAMV,MAAM,QACV,gCAEF,qCACS,8BAGT,0BAAMA,MAAM,UACV,gCAEF,qCACS,8BAGT,0BAAMA,MAAM,UACV,gCAEF,oCAEA,WAwBlB,kBAAClF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACiI,EAAA,EAAD,CAAMC,GAAIzI,KAAKH,MAAMsG,MACnB,yBAAKtE,GAAG,qBAEJ,kBAAC,EAAD,CACE/B,SAAUE,KAAKH,MAAMC,SACrBC,YAAaC,KAAKH,MAAMmG,QACxB9F,SAAUF,KAAKH,MAAMK,SACrBC,MAAOH,KAAKH,MAAMM,kB,GA9PtB+D,aCREwE,QACW,cAA7BtG,OAAOuG,SAASC,UAEe,UAA7BxG,OAAOuG,SAASC,UAEhBxG,OAAOuG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnI,QAAQmI,MAAMA,EAAMC,c","file":"static/js/main.14c6e3ab.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as d3 from 'd3'\r\nimport { Container,Card } from \"react-bootstrap\";\r\nimport { Row, Col, Navbar } from 'react-bootstrap';\r\n\r\nclass Graph extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            jsonData:{},\r\n            diseaseName:''\r\n        }\r\n      }\r\n\r\n      componentDidUpdate(){\r\n\r\n        this.makeGraph(this.props.jsonData, this.props.diseaseName, this.props.proteins, this.props.drugs);\r\n\r\n      }\r\n\r\n\r\n    render() {\r\n        d3.selectAll(\"svg > *\").remove();\r\n\r\n        //console.log(`data: ${this.props.proteins}`)\r\n\r\n        return (\r\n                <Row >\r\n                    <Col >\r\n                        <svg className = 'GraphSvg' \r\n                           style={{ backgroundColor: 'white',  height: '1080px', width: '100%', overflow: 'auto',\r\n                           border: '3px solid green' }}\r\n                            ref='canvas'>\r\n                    \r\n\r\n                        </svg>\r\n                    </Col>\r\n                </Row>\r\n   \r\n       \r\n        );\r\n    }\r\n\r\n\r\n    makeGraph(data, diseaseName, prots,drugs) {\r\n       // console.log('disease :' + diseaseName + ' prots: ' + prots)\r\n                if(data.hasOwnProperty(diseaseName)) { \r\n                    console.log('starting to paint graph...')\r\n                    let nodes = []\r\n                    let links = []\r\n                    let i = 1\r\n                    nodes.push({id:diseaseName, name:diseaseName, type:\"disease\"})\r\n                    \r\n                 \r\n                    for(var protein in prots) {\r\n                        nodes.push({id:prots[protein],name:prots[protein], type:\"protein\"})\r\n                        links.push({target:prots[protein], source:diseaseName})\r\n                        //console.log('protein: ' + prots[protein] + ' drugs: ' + drugs[prots[protein]])\r\n                        if(drugs[prots[protein]].length < 10)\r\n                        { \r\n                           for(var drug in drugs[prots[protein]]){\r\n                            let drugName = drugs[prots[protein]][drug]\r\n                            nodes.push({id:`${drugName}${i}`, name:drugName, type:'drug'})\r\n                            links.push({target: `${drugName}${i}`, source: prots[protein]})\r\n                            i++}\r\n\r\n                        }\r\n                    }\r\n                var width = window.innerWidth //window.innerWidth\r\n                var height = window.innerHeight + 400 //window.innerHeight\r\n\r\n\r\n                var svg = d3.select(this.refs.canvas).attr('viewbox',[0,0,width,height])\r\n            \r\n               /*\r\n                svg.call(d3.zoom()\r\n                    //.extent([[0, 0], [width, height]])\r\n                    .scaleExtent([1, 8])\r\n                    .on(\"zoom\", zoomed));\r\n                */\r\n/*\r\n                function zoomed({transform}) {\r\n                    nodeElementsProteins.attr(\"transform\", d => `translate(${transform.apply(d)})`);\r\n                    nodeElementsDiseases.attr(\"transform\", d => `translate(${transform.apply(d)})`);    \r\n                    nodeElementsDrugs.attr(\"transform\", d => `translate(${transform.apply(d)})`);\r\n                }\r\n                    \r\n                */\r\n                var linkForce = d3\r\n                .forceLink()\r\n                .id(function (link) { return link.id })\r\n\r\n                // simulation setup with all forces\r\n                var simulation = d3\r\n                .forceSimulation()\r\n                .force('charge', d3.forceManyBody().strength(-300))\r\n                .force('center', d3.forceCenter(width / 2, height / 2))\r\n                .force('link',linkForce)\r\n\r\n                var linkElements = svg.append(\"g\")\r\n                    .attr(\"class\", \"links\")\r\n                    .selectAll(\"line\")\r\n                    .data(links)\r\n                    .enter().append(\"line\")\r\n                    .attr(\"stroke-dasharray\", 3)\r\n                        .attr(\"stroke\", \"rgba(50, 50, 50, 0.4)\")\r\n\r\n                function getNodeColor(node) {\r\n                return node.type === 'disease' ? 'red' :\r\n                node.type === 'protein' ? 'blue' : 'green'\r\n                }\r\n\r\n                function getProteins(nodesList) {\r\n                    return nodesList.filter((n) => n.type === 'protein');\r\n                }\r\n                function getDiseases(nodesList) {\r\n                        return nodesList.filter((n) => n.type === 'disease');\r\n                }\r\n                function getDrugs(nodesList) {\r\n                    return nodesList.filter((n) => n.type === 'drug');\r\n                }\r\n                var nodeElementsProteins = svg.append(\"g\")\r\n                .attr(\"class\", \"nodes\")\r\n                .selectAll(\"circle\")\r\n                .data(getProteins(nodes))\r\n                .enter().append(\"circle\")\r\n                    .attr(\"r\", 8)\r\n                    .attr(\"fill\", getNodeColor)\r\n                    .on(\"mouseover\", function (d) {\r\n                        d3.select(this).style(\"fill\", \"yellow\")\r\n                    }).on(\"mouseout\", function (d) {\r\n                        d3.select(this).style(\"fill\", \"blue\")\r\n                    })\r\n                    \r\n\r\n                var nodeElementsDiseases = svg.append(\"g\")\r\n                    .attr(\"class\", \"nodes\")\r\n                    .selectAll(\"rect\")\r\n                    .data(getDiseases(nodes))\r\n                    .enter().append(\"rect\")\r\n                    .attr(\"width\", 20)\r\n                    .attr(\"height\", 20)\r\n                    .attr(\"fill\", getNodeColor)\r\n                    .on(\"mouseover\", function (d) {\r\n                        d3.select(this).style(\"fill\", \"yellow\")\r\n                    }).on(\"mouseout\", function (d) {\r\n                        d3.select(this).style(\"fill\", \"red\")\r\n                    })\r\n\r\n                var nodeElementsDrugs = svg.append(\"g\")\r\n                    .attr(\"class\", \"nodes\")\r\n                    .selectAll(\"circle\")\r\n                    .data(getDrugs(nodes))\r\n                    .enter().append(\"circle\")\r\n                        .attr(\"r\", 6)\r\n                        .attr(\"fill\", getNodeColor)\r\n                    .on(\"mouseover\", function (d) {\r\n                        d3.select(this).style(\"fill\", \"yellow\")\r\n                    }).on(\"mouseout\", function (d) {\r\n                        d3.select(this).style(\"fill\", \"#348017\")\r\n                    })\r\n                    \r\n\r\n                var textElements = svg.append(\"g\")\r\n                .attr(\"class\", \"texts\")\r\n                .selectAll(\"text\")\r\n                .data(nodes)\r\n                .enter().append(\"text\")\r\n                    .text(function (node) { return  node.name })\r\n                    .attr(\"font-size\", 11)\r\n                    .attr(\"dx\", 15)\r\n                    .attr(\"dy\", 4)\r\n                    .attr(\"fill\", getNodeColor)\r\n                    .attr(\"font-weight\",\"bold\")\r\n\r\n\r\n                simulation.nodes(nodes).on('tick', () => {\r\n                    nodeElementsProteins\r\n                    .attr('cx', function (node) { return node.x })\r\n                    .attr('cy', function (node) { return node.y })\r\n                nodeElementsDiseases\r\n                    .attr('x', function (node) { return node.x })\r\n                    .attr('y', function (node) { return node.y })\r\n\r\n                    nodeElementsDrugs\r\n                    .attr('cx', function (node) { return node.x })\r\n                    .attr('cy', function (node) { return node.y })\r\n\r\n                    \r\n                    textElements\r\n                    .attr('x', function (node) { return node.x })\r\n                    .attr('y', function (node) { return node.y })\r\n                    linkElements\r\n                        .attr('x1', function (link) { return link.source.x })\r\n                        .attr('y1', function (link) { return link.source.y })\r\n                        .attr('x2', function (link) { return link.target.x })\r\n                        .attr('y2', function (link) { return link.target.y })\r\n                })\r\n\r\n                simulation.force('link').links(links);\r\n                }\r\n                else{\r\n                    console.log(` disease ${diseaseName} not found` )\r\n                }\r\n            }\r\n        }\r\n    \r\n\r\nexport default Graph;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Autocomplete extends Component {\r\n  static propTypes = {\r\n    suggestions: PropTypes.instanceOf(Array)\r\n  };\r\n\r\n  static defaultProps = {\r\n    suggestions: []\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // The active selection's index\r\n      activeSuggestion: 0,\r\n      // The suggestions that match the user's input\r\n      filteredSuggestions: [],\r\n      // Whether or not the suggestion list is shown\r\n      showSuggestions: false,\r\n      // What the user has entered\r\n      userInput: \"\"\r\n    };\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.props.hideChart();\r\n    const { suggestions } = this.props;\r\n    const userInput = e.currentTarget.value;\r\n\r\n    // Filter our suggestions that don't contain the user's input\r\n    const filteredSuggestions = suggestions.filter(\r\n      (suggestion) =>\r\n        suggestion.toLowerCase().indexOf(userInput.toLowerCase()) === 0\r\n    );\r\n\r\n    this.setState({\r\n      activeSuggestion: 0,\r\n      filteredSuggestions,\r\n      showSuggestions: true,\r\n      userInput: e.currentTarget.value\r\n    });\r\n  };\r\n\r\n  onClick = (e) => {\r\n    this.setState({\r\n      activeSuggestion: 0,\r\n      filteredSuggestions: [],\r\n      showSuggestions: false,\r\n      userInput: e.currentTarget.innerText\r\n    });\r\n\r\n    this.props.handler(e, e.currentTarget.innerText);\r\n  };\r\n\r\n  onKeyDown = (e) => {\r\n    const { activeSuggestion, filteredSuggestions } = this.state;\r\n\r\n    // User pressed the enter key\r\n    if (e.keyCode === 13) {\r\n      this.setState({\r\n        activeSuggestion: 0,\r\n        showSuggestions: false,\r\n        userInput: filteredSuggestions[activeSuggestion]\r\n      });\r\n    }\r\n    // User pressed the up arrow\r\n    else if (e.keyCode === 38) {\r\n      if (activeSuggestion === 0) {\r\n        return;\r\n      }\r\n\r\n      this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n    }\r\n    // User pressed the down arrow\r\n    else if (e.keyCode === 40) {\r\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n        return;\r\n      }\r\n\r\n      this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onChange,\r\n      onClick,\r\n      onKeyDown,\r\n      state: {\r\n        activeSuggestion,\r\n        filteredSuggestions,\r\n        showSuggestions,\r\n        userInput\r\n      }\r\n    } = this;\r\n\r\n    let suggestionsListComponent;\r\n\r\n    if (showSuggestions && userInput) {\r\n      if (filteredSuggestions.length) {\r\n        suggestionsListComponent = (\r\n          <ul class=\"suggestions\">\r\n            {filteredSuggestions.map((suggestion, index) => {\r\n              let className;\r\n\r\n              // Flag the active suggestion with a class\r\n              if (index === activeSuggestion) {\r\n                className = \"suggestion-active\";\r\n              }\r\n\r\n              return (\r\n                <li className={className} key={suggestion} onClick={onClick}>\r\n                  {suggestion}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        );\r\n      } else {\r\n        suggestionsListComponent = (\r\n          <div class=\"no-suggestions\">\r\n            <em>No suggestions, you're on your own!</em>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <input\r\n          type=\"text\"\r\n          onChange={onChange}\r\n          onKeyDown={onKeyDown}\r\n          value={userInput}\r\n        />\r\n        {suggestionsListComponent}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Autocomplete;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Graph from \"./Graph.js\";\nimport Autocomplete from \"./Autocomplete.jsx\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css\";\n\nimport RangeSlider from \"react-bootstrap-range-slider\";\nimport {\n  Button,\n  Container,\n  Form,\n  Card,\n  Row,\n  Col,\n  Navbar,\n  Fade\n} from \"react-bootstrap\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handler = this.handler.bind(this);\n    this.hideChart = this.hideChart.bind(this);\n    this.state = {\n      userName: \"Barak\",\n      value: \"\",\n      disease: \"\",\n      jsonData: {},\n      jsonDrugs: {},\n      drugs: [],\n      view: false,\n      open: false\n    };\n  }\n\n  hideChart() {\n    this.setState({\n      view: false,\n      open: false\n    });\n  }\n  handler(e, val) {\n    this.setState({\n      disease: val,\n      value: val\n    });\n  }\n  componentDidMount() {\n    console.log(\"mounting APP\");\n    let url = \"https://api.jsonbin.io/b/5f74bd117243cd7e824742f6\";\n    const response = fetch(url, {\n      method: \"GET\", // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\", // no-cors, *cors, same-origin\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"same-origin\", // include, *same-origin, omit\n      headers: {\n        \"secret-key\":\n          \"$2b$10$ySWzEs3S9JUHfDfnYERQc.EsFmQlIYLt5Jab9bvVm3zU6g1dvMJ8m\"\n      }\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        this.setState((prevState) => ({ jsonData: data }));\n        this.getDiseases();\n      });\n\n    url = \"https://api.jsonbin.io/b/5f762e2c7243cd7e82484f0c\";\n    const response2 = fetch(url, {\n      method: \"GET\", // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\", // no-cors, *cors, same-origin\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"same-origin\", // include, *same-origin, omit\n      headers: {\n        \"secret-key\":\n          \"$2b$10$ySWzEs3S9JUHfDfnYERQc.EsFmQlIYLt5Jab9bvVm3zU6g1dvMJ8m\"\n      }\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        this.setState((prevState) => ({ jsonDrugs: data }));\n      });\n  }\n\n  getDiseases() {\n    var diseases = [];\n    for (var d in this.state.jsonData) {\n      diseases.push(d);\n    }\n\n    this.setState((prevState) => ({\n      diseases: diseases\n    }));\n  }\n\n  onInput(e) {\n    e.preventDefault();\n\n    this.setState({\n      value: e.target.value,\n      view: false,\n      open: false\n    });\n    console.log(\"key\");\n  }\n\n  getData() {\n    let proteins = this.state.jsonData[this.state.value];\n    var drugs = {};\n    for (var prot in proteins) {\n      drugs[proteins[prot]] = this.state.jsonDrugs[proteins[prot]];\n    }\n    this.setState((prevState) => ({\n      proteins: this.state.jsonData[this.state.value],\n      disease: this.state.value,\n      drugs: drugs\n    }));\n  }\n\n  onEnter(e) {\n    console.log(\"enter\");\n    this.getData();\n    e.preventDefault();\n    this.setState((prevState) => ({\n      view: true,\n      open: true\n    }));\n    //this.getData()\n  }\n\n  render() {\n    let diseaseName = this.state.value;\n    return (\n      <body\n        style={{\n          backgroundImage:\n            \"url(https://eskipaper.com/images/high-res-abstract-backgrounds-1.jpg)\",\n          backgroundRepeat: \"no-repeat\",\n          backgroundSize: \"cover\"\n        }}\n      >\n        <Container fluid>\n          {/******************* Site Header  ********************/}\n\n          <Row>\n            <Col>\n              <Row>\n                {/******************* LOGO  ********************/}\n\n                <Col xs={1.5}>\n                  <img\n                    src=\"https://upload.wikimedia.org/wikipedia/en/thumb/2/29/Ben-Gurion_University_of_the_Negev.svg/1200px-Ben-Gurion_University_of_the_Negev.svg.png\"\n                    style={{ height: \"200px\", width: \"200px\" }}\n                  />\n                </Col>\n\n                {/******************* Header and Search Bar  ********************/}\n\n                <Col xs={8}>\n                  <Row>\n                    <Col>\n                    <h1\n                      style={{\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        fontFamily: \"Arial Black\",\n                        textShadow: \"3px 6px 2px rgba(0, 0, 0, .3)\",\n                        color: \"white\"\n                      }}\n                    >\n                      Disease - Protein - Drug{\" \"}\n                  </h1>\n                      <br/>\n                    </Col>\n                  </Row>\n                  <Row>\n                  {/*<Form style={{ paddingLeft: \"200px\", paddingRight: \"200px\" }}>*/}\n                  {/*  <br />*/}\n                  {/*  <Form.Group controlId=\"formBasicRange\">*/}\n                      {/* <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter Disease Name\"\n                        value={diseaseName}\n                        onChange={(e) => this.onInput(e)}\n                        style={{ display: \"flex\", justifyContent: \"center\" }}\n                      /> */}\n\n                      <Col xs={3} style={{marginLeft:'300px'}}>\n                      <Autocomplete\n                        suggestions={this.state.diseases}\n                        handler={this.handler}\n                        hideChart={this.hideChart}\n                      />\n                      </Col>\n                    <Col xs={1} style={{marginLeft:'50px'}}>\n                      <Button\n                          variant=\"primary\"\n                          className=\"button\"\n                          onClick={(e) => {\n                            this.getData();\n                            this.onEnter(e);\n                            //  this.setState( prevState=> ({open: !this.state.open, view: true}) )\n                          }}\n                          aria-controls=\"example-fade-text\"\n                          aria-expanded={this.state.open}\n                      >\n                        {\" \"}\n                        SUBMIT <br />\n                      </Button>\n                    </Col>\n                      <div\n                        style={{\n                          height: \"auto\",\n                          color: \"white\",\n                          fontSize: \"19px\",\n                          marginLeft: \"200px\",\n                          marginTop:\"60px\"\n                        }}\n                      >\n                        {this.state.view ? (\n                          <p>\n                            <span class=\"r-cl\">\n                              <span></span>\n                            </span>\n                            <b>\n                              Disease<br></br>\n                            </b>\n\n                            <span class=\"c-p-cl\">\n                              <span></span>\n                            </span>\n                            <b>\n                              Protein<br></br>\n                            </b>\n\n                            <span class=\"c-d-cl\">\n                              <span></span>\n                            </span>\n                            <b>Drug</b>\n                          </p>\n                        ) : null}\n                      </div>\n                      {/* <Fade in={this.state.open}>\n        <div id=\"example-fade-text\">\n          Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus\n          terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer\n          labore wes anderson cred nesciunt sapiente ea proident.\n        </div>\n      </Fade> */}\n                  {/*  </Form.Group>*/}\n\n                  {/*</Form>*/}\n                  </Row>\n                </Col>\n\n                {/******************* Legend  ********************/}\n              </Row>\n            </Col>\n          </Row>\n\n          {/******************* END OF Header  ********************/}\n\n          {/*******************Graph Chart ********************/}\n\n          <Row>\n            <Col>\n              <Fade in={this.state.open}>\n                <div id=\"example-fade-text\">\n                  {\n                    <Graph\n                      jsonData={this.state.jsonData}\n                      diseaseName={this.state.disease}\n                      proteins={this.state.proteins}\n                      drugs={this.state.drugs}\n                    />\n                  }\n                </div>\n              </Fade>\n            </Col>\n          </Row>\n\n          {/*******************END OF Graph Chart ********************/}\n        </Container>\n      </body>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}